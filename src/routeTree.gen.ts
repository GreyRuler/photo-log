/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NotificationsImport } from './routes/notifications'
import { Route as LogoutImport } from './routes/logout'
import { Route as LoginImport } from './routes/login'
import { Route as FavoritesImport } from './routes/favorites'
import { Route as IndexImport } from './routes/index'
import { Route as CategoriesIndexImport } from './routes/categories/index'
import { Route as AdministrationIndexImport } from './routes/administration/index'
import { Route as DetailsIdImport } from './routes/details.$id'
import { Route as CategoriesUploadImport } from './routes/categories/upload'
import { Route as CategoriesIdImport } from './routes/categories/$id'
import { Route as AdministrationSettingsImport } from './routes/administration/settings'
import { Route as AdministrationPhotosImport } from './routes/administration/photos'
import { Route as AdministrationUsersIndexImport } from './routes/administration/users/index'
import { Route as AdministrationTableIndexImport } from './routes/administration/table/index'
import { Route as AdministrationNotificationsIndexImport } from './routes/administration/notifications/index'
import { Route as AdministrationCategoriesIndexImport } from './routes/administration/categories/index'
import { Route as AdministrationUsersCreateImport } from './routes/administration/users/create'
import { Route as AdministrationNotificationsCreateImport } from './routes/administration/notifications/create'
import { Route as AdministrationCategoriesCreateImport } from './routes/administration/categories/create'
import { Route as AdministrationUsersIdUpdateImport } from './routes/administration/users/$id.update'
import { Route as AdministrationUsersIdDeleteImport } from './routes/administration/users/$id.delete'
import { Route as AdministrationTableDetailsIdImport } from './routes/administration/table/details.$id'
import { Route as AdministrationNotificationsIdUpdateImport } from './routes/administration/notifications/$id.update'
import { Route as AdministrationNotificationsIdDeleteImport } from './routes/administration/notifications/$id.delete'
import { Route as AdministrationCategoriesIdUpdateImport } from './routes/administration/categories/$id.update'
import { Route as AdministrationCategoriesIdDeleteImport } from './routes/administration/categories/$id.delete'

// Create/Update Routes

const NotificationsRoute = NotificationsImport.update({
  path: '/notifications',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const FavoritesRoute = FavoritesImport.update({
  path: '/favorites',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CategoriesIndexRoute = CategoriesIndexImport.update({
  path: '/categories/',
  getParentRoute: () => rootRoute,
} as any)

const AdministrationIndexRoute = AdministrationIndexImport.update({
  path: '/administration/',
  getParentRoute: () => rootRoute,
} as any)

const DetailsIdRoute = DetailsIdImport.update({
  path: '/details/$id',
  getParentRoute: () => rootRoute,
} as any)

const CategoriesUploadRoute = CategoriesUploadImport.update({
  path: '/categories/upload',
  getParentRoute: () => rootRoute,
} as any)

const CategoriesIdRoute = CategoriesIdImport.update({
  path: '/categories/$id',
  getParentRoute: () => rootRoute,
} as any)

const AdministrationSettingsRoute = AdministrationSettingsImport.update({
  path: '/administration/settings',
  getParentRoute: () => rootRoute,
} as any)

const AdministrationPhotosRoute = AdministrationPhotosImport.update({
  path: '/administration/photos',
  getParentRoute: () => rootRoute,
} as any)

const AdministrationUsersIndexRoute = AdministrationUsersIndexImport.update({
  path: '/administration/users/',
  getParentRoute: () => rootRoute,
} as any)

const AdministrationTableIndexRoute = AdministrationTableIndexImport.update({
  path: '/administration/table/',
  getParentRoute: () => rootRoute,
} as any)

const AdministrationNotificationsIndexRoute =
  AdministrationNotificationsIndexImport.update({
    path: '/administration/notifications/',
    getParentRoute: () => rootRoute,
  } as any)

const AdministrationCategoriesIndexRoute =
  AdministrationCategoriesIndexImport.update({
    path: '/administration/categories/',
    getParentRoute: () => rootRoute,
  } as any)

const AdministrationUsersCreateRoute = AdministrationUsersCreateImport.update({
  path: '/administration/users/create',
  getParentRoute: () => rootRoute,
} as any)

const AdministrationNotificationsCreateRoute =
  AdministrationNotificationsCreateImport.update({
    path: '/administration/notifications/create',
    getParentRoute: () => rootRoute,
  } as any)

const AdministrationCategoriesCreateRoute =
  AdministrationCategoriesCreateImport.update({
    path: '/administration/categories/create',
    getParentRoute: () => rootRoute,
  } as any)

const AdministrationUsersIdUpdateRoute =
  AdministrationUsersIdUpdateImport.update({
    path: '/administration/users/$id/update',
    getParentRoute: () => rootRoute,
  } as any)

const AdministrationUsersIdDeleteRoute =
  AdministrationUsersIdDeleteImport.update({
    path: '/administration/users/$id/delete',
    getParentRoute: () => rootRoute,
  } as any)

const AdministrationTableDetailsIdRoute =
  AdministrationTableDetailsIdImport.update({
    path: '/administration/table/details/$id',
    getParentRoute: () => rootRoute,
  } as any)

const AdministrationNotificationsIdUpdateRoute =
  AdministrationNotificationsIdUpdateImport.update({
    path: '/administration/notifications/$id/update',
    getParentRoute: () => rootRoute,
  } as any)

const AdministrationNotificationsIdDeleteRoute =
  AdministrationNotificationsIdDeleteImport.update({
    path: '/administration/notifications/$id/delete',
    getParentRoute: () => rootRoute,
  } as any)

const AdministrationCategoriesIdUpdateRoute =
  AdministrationCategoriesIdUpdateImport.update({
    path: '/administration/categories/$id/update',
    getParentRoute: () => rootRoute,
  } as any)

const AdministrationCategoriesIdDeleteRoute =
  AdministrationCategoriesIdDeleteImport.update({
    path: '/administration/categories/$id/delete',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/favorites': {
      id: '/favorites'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof FavoritesImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsImport
      parentRoute: typeof rootRoute
    }
    '/administration/photos': {
      id: '/administration/photos'
      path: '/administration/photos'
      fullPath: '/administration/photos'
      preLoaderRoute: typeof AdministrationPhotosImport
      parentRoute: typeof rootRoute
    }
    '/administration/settings': {
      id: '/administration/settings'
      path: '/administration/settings'
      fullPath: '/administration/settings'
      preLoaderRoute: typeof AdministrationSettingsImport
      parentRoute: typeof rootRoute
    }
    '/categories/$id': {
      id: '/categories/$id'
      path: '/categories/$id'
      fullPath: '/categories/$id'
      preLoaderRoute: typeof CategoriesIdImport
      parentRoute: typeof rootRoute
    }
    '/categories/upload': {
      id: '/categories/upload'
      path: '/categories/upload'
      fullPath: '/categories/upload'
      preLoaderRoute: typeof CategoriesUploadImport
      parentRoute: typeof rootRoute
    }
    '/details/$id': {
      id: '/details/$id'
      path: '/details/$id'
      fullPath: '/details/$id'
      preLoaderRoute: typeof DetailsIdImport
      parentRoute: typeof rootRoute
    }
    '/administration/': {
      id: '/administration/'
      path: '/administration'
      fullPath: '/administration'
      preLoaderRoute: typeof AdministrationIndexImport
      parentRoute: typeof rootRoute
    }
    '/categories/': {
      id: '/categories/'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesIndexImport
      parentRoute: typeof rootRoute
    }
    '/administration/categories/create': {
      id: '/administration/categories/create'
      path: '/administration/categories/create'
      fullPath: '/administration/categories/create'
      preLoaderRoute: typeof AdministrationCategoriesCreateImport
      parentRoute: typeof rootRoute
    }
    '/administration/notifications/create': {
      id: '/administration/notifications/create'
      path: '/administration/notifications/create'
      fullPath: '/administration/notifications/create'
      preLoaderRoute: typeof AdministrationNotificationsCreateImport
      parentRoute: typeof rootRoute
    }
    '/administration/users/create': {
      id: '/administration/users/create'
      path: '/administration/users/create'
      fullPath: '/administration/users/create'
      preLoaderRoute: typeof AdministrationUsersCreateImport
      parentRoute: typeof rootRoute
    }
    '/administration/categories/': {
      id: '/administration/categories/'
      path: '/administration/categories'
      fullPath: '/administration/categories'
      preLoaderRoute: typeof AdministrationCategoriesIndexImport
      parentRoute: typeof rootRoute
    }
    '/administration/notifications/': {
      id: '/administration/notifications/'
      path: '/administration/notifications'
      fullPath: '/administration/notifications'
      preLoaderRoute: typeof AdministrationNotificationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/administration/table/': {
      id: '/administration/table/'
      path: '/administration/table'
      fullPath: '/administration/table'
      preLoaderRoute: typeof AdministrationTableIndexImport
      parentRoute: typeof rootRoute
    }
    '/administration/users/': {
      id: '/administration/users/'
      path: '/administration/users'
      fullPath: '/administration/users'
      preLoaderRoute: typeof AdministrationUsersIndexImport
      parentRoute: typeof rootRoute
    }
    '/administration/categories/$id/delete': {
      id: '/administration/categories/$id/delete'
      path: '/administration/categories/$id/delete'
      fullPath: '/administration/categories/$id/delete'
      preLoaderRoute: typeof AdministrationCategoriesIdDeleteImport
      parentRoute: typeof rootRoute
    }
    '/administration/categories/$id/update': {
      id: '/administration/categories/$id/update'
      path: '/administration/categories/$id/update'
      fullPath: '/administration/categories/$id/update'
      preLoaderRoute: typeof AdministrationCategoriesIdUpdateImport
      parentRoute: typeof rootRoute
    }
    '/administration/notifications/$id/delete': {
      id: '/administration/notifications/$id/delete'
      path: '/administration/notifications/$id/delete'
      fullPath: '/administration/notifications/$id/delete'
      preLoaderRoute: typeof AdministrationNotificationsIdDeleteImport
      parentRoute: typeof rootRoute
    }
    '/administration/notifications/$id/update': {
      id: '/administration/notifications/$id/update'
      path: '/administration/notifications/$id/update'
      fullPath: '/administration/notifications/$id/update'
      preLoaderRoute: typeof AdministrationNotificationsIdUpdateImport
      parentRoute: typeof rootRoute
    }
    '/administration/table/details/$id': {
      id: '/administration/table/details/$id'
      path: '/administration/table/details/$id'
      fullPath: '/administration/table/details/$id'
      preLoaderRoute: typeof AdministrationTableDetailsIdImport
      parentRoute: typeof rootRoute
    }
    '/administration/users/$id/delete': {
      id: '/administration/users/$id/delete'
      path: '/administration/users/$id/delete'
      fullPath: '/administration/users/$id/delete'
      preLoaderRoute: typeof AdministrationUsersIdDeleteImport
      parentRoute: typeof rootRoute
    }
    '/administration/users/$id/update': {
      id: '/administration/users/$id/update'
      path: '/administration/users/$id/update'
      fullPath: '/administration/users/$id/update'
      preLoaderRoute: typeof AdministrationUsersIdUpdateImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  FavoritesRoute,
  LoginRoute,
  LogoutRoute,
  NotificationsRoute,
  AdministrationPhotosRoute,
  AdministrationSettingsRoute,
  CategoriesIdRoute,
  CategoriesUploadRoute,
  DetailsIdRoute,
  AdministrationIndexRoute,
  CategoriesIndexRoute,
  AdministrationCategoriesCreateRoute,
  AdministrationNotificationsCreateRoute,
  AdministrationUsersCreateRoute,
  AdministrationCategoriesIndexRoute,
  AdministrationNotificationsIndexRoute,
  AdministrationTableIndexRoute,
  AdministrationUsersIndexRoute,
  AdministrationCategoriesIdDeleteRoute,
  AdministrationCategoriesIdUpdateRoute,
  AdministrationNotificationsIdDeleteRoute,
  AdministrationNotificationsIdUpdateRoute,
  AdministrationTableDetailsIdRoute,
  AdministrationUsersIdDeleteRoute,
  AdministrationUsersIdUpdateRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/favorites",
        "/login",
        "/logout",
        "/notifications",
        "/administration/photos",
        "/administration/settings",
        "/categories/$id",
        "/categories/upload",
        "/details/$id",
        "/administration/",
        "/categories/",
        "/administration/categories/create",
        "/administration/notifications/create",
        "/administration/users/create",
        "/administration/categories/",
        "/administration/notifications/",
        "/administration/table/",
        "/administration/users/",
        "/administration/categories/$id/delete",
        "/administration/categories/$id/update",
        "/administration/notifications/$id/delete",
        "/administration/notifications/$id/update",
        "/administration/table/details/$id",
        "/administration/users/$id/delete",
        "/administration/users/$id/update"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/favorites": {
      "filePath": "favorites.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/notifications": {
      "filePath": "notifications.tsx"
    },
    "/administration/photos": {
      "filePath": "administration/photos.tsx"
    },
    "/administration/settings": {
      "filePath": "administration/settings.tsx"
    },
    "/categories/$id": {
      "filePath": "categories/$id.tsx"
    },
    "/categories/upload": {
      "filePath": "categories/upload.tsx"
    },
    "/details/$id": {
      "filePath": "details.$id.tsx"
    },
    "/administration/": {
      "filePath": "administration/index.tsx"
    },
    "/categories/": {
      "filePath": "categories/index.tsx"
    },
    "/administration/categories/create": {
      "filePath": "administration/categories/create.tsx"
    },
    "/administration/notifications/create": {
      "filePath": "administration/notifications/create.tsx"
    },
    "/administration/users/create": {
      "filePath": "administration/users/create.tsx"
    },
    "/administration/categories/": {
      "filePath": "administration/categories/index.tsx"
    },
    "/administration/notifications/": {
      "filePath": "administration/notifications/index.tsx"
    },
    "/administration/table/": {
      "filePath": "administration/table/index.tsx"
    },
    "/administration/users/": {
      "filePath": "administration/users/index.tsx"
    },
    "/administration/categories/$id/delete": {
      "filePath": "administration/categories/$id.delete.tsx"
    },
    "/administration/categories/$id/update": {
      "filePath": "administration/categories/$id.update.tsx"
    },
    "/administration/notifications/$id/delete": {
      "filePath": "administration/notifications/$id.delete.tsx"
    },
    "/administration/notifications/$id/update": {
      "filePath": "administration/notifications/$id.update.tsx"
    },
    "/administration/table/details/$id": {
      "filePath": "administration/table/details.$id.tsx"
    },
    "/administration/users/$id/delete": {
      "filePath": "administration/users/$id.delete.tsx"
    },
    "/administration/users/$id/update": {
      "filePath": "administration/users/$id.update.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
